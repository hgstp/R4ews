[
["index.html", "R4ews MA009 Willkommen zur R Ergänzung zur Einführung in die Wahrscheinlichkeitstheorie und Statistik Beteiligte Personen Kolophon Lizenz", " R4ews MA009 Stephan Haug Willkommen zur R Ergänzung zur Einführung in die Wahrscheinlichkeitstheorie und Statistik Im Rahmen dieser Ergänzung lernen wir Daten untersuchen, aufbereiten, visualisieren und analysieren, Wir wollen all das reproduzierbar, wiederverwendbar und gemeinsam nutzbar machen, und vor allem wollen wir alles mit R machen. Auf dieser Website geht es um alles, was bei der Datenanalyse auftaucht außer um statistische Modellierung und Schlussfolgerungen. Dieser Teil der statistischen Analyse erfolgt in der Vorlesung Einführung in die Wahrscheinlichkeitstheorie und Statistik. Das Design von R4ews wurde durch die Notwendigkeit motiviert, mehr Ausgewogenheit in der angewandten statistischen Ausbildung zu schaffen. Datenanalysten verbringen viel Zeit mit der Projektorganisation, der Datenbereinigung und -aufbereitung sowie der Kommunikation. Diese Tätigkeiten können einen tiefgreifenden Einfluss auf die Qualität und Glaubwürdigkeit einer Analyse haben. Dennoch werden diese Fähigkeiten selten vermittelt, obwohl sie so wichtig und notwendig sind. R4ews zielt darauf ab, diese Lücke zu schließen. Das Material wird kontinuierlich über das Semester hinweg ergänzt/erweitert/verbessert. Letzte Änderung: date() #&gt; [1] &quot;Fri Oct 30 14:38:33 2020&quot; Beteiligte Personen Kolophon Dieses Buch wurde in bookdown innerhalb von RStudio geschrieben. Teile des Buches basieren auf stat545.com. Alle Änderungen wurden gemäß der Creative Commons Attribution-ShareAlike 4.0 International License durchgeführt. Wir bedanken uns bei den Autor*innen von stat545 für das großartige Material. Die aktuelle Version dieses Buchs wurde mit #&gt; Finding R package dependencies ... Done! #&gt; setting value #&gt; version R version 4.0.2 (2020-06-22) #&gt; os macOS Catalina 10.15.7 #&gt; system x86_64, darwin17.0 #&gt; ui X11 #&gt; language (EN) #&gt; collate en_US.UTF-8 #&gt; ctype en_US.UTF-8 #&gt; tz Europe/Berlin #&gt; date 2020-10-30 erstellt Lizenz Diese Arbeit ist lizensiert unter Creative Commons Attribution-ShareAlike 4.0 International License. "],
["install.html", "Kapitel 1 Installieren von R und RStudio 1.1 R und RStudio 1.2 Funktioniert? Ausprobieren 1.3 Add-on packages 1.4 RStudio Primers 1.5 Aufgabe", " Kapitel 1 Installieren von R und RStudio 1.1 R und RStudio Installieren Sie R, eine freie Softwareumgebung für statistische Berechnungen und Grafiken von CRAN, dem Comprehensive R Archive Network. Wir empfehle Ihnen dringend, eine vorkompilierte Binärdistribution für Ihr Betriebssystem zu installieren - benutzen Sie die Links oben auf der CRAN Seite! Installieren Sie die IDE von RStudio (steht für integrated development environment), eine leistungsfähige Benutzeroberfläche für R. Holen Sie sich die Open-Source-Edition von RStudio Desktop. Es ist vorteilhaft die Preview version zu installieren. In der Regel ist sie bereits sehr stabil und man hat so Zugriff auf die neusten Features. Natürlich gibt es auch offizielle Veröffentlichungen here. RStudio wird mit einem Text Editor geliefert, so dass es nicht unmittelbar erforderlich ist, einen separaten, eigenständigen Editor zu installieren. RStudio kann eine Schnittstelle zu Git(Hub) bilden. Sie müssen jedoch alle Git(Hub)-Installationen selbst vornehmen. Wir kommen später auf diesen Punkt zurück. Wenn Sie eine bereits vorhandene R und/oder RStudio Installation haben, empfehlen wir Ihnen dringend, beide neu zu installieren und so aktuell wie möglich zu halten. Wenn Sie R aktualisieren, müssen Sie alle Pakete, die Sie installiert haben, aktualisieren. Der unten stehende Befehl sollte Ihnen den Anfang machen, obwohl Sie möglicherweise weitere Argumente angeben müssen, wenn Sie z.B. eine nicht standardmäßige Bibliothek für Ihre Pakete verwendet haben. update.packages(ask = FALSE, checkBuilt = TRUE) Bemerkung: hier wird nur nach Updates auf CRAN gesucht. Wenn Sie also ein Paket verwenden, das z.B. nur auf GitHub lebt, müssen Sie manuell aktualisieren, z.B. über devtools::install_github(). 1.2 Funktioniert? Ausprobieren Starten Sie RStudio auf Ihrem Computer. Sie sollten ein Fenster ähnlich zu diesem Screenshot, erhalten. Setzen Sie den Cursor in den Bereich mit der Bezeichnung Konsole, wo Sie mit R interagieren können. Erstellen Sie ein einfaches Objekt mit einem Code wie x &lt;- 2 * 4 (gefolgt von Enter oder Return). Inspizieren Sie dann das x-Objekt durch Eingabe von x gefolgt von Enter oder Return. Sie sollten den Wert 8 auf dem Bildschirm sehen. Wenn ja, haben Sie R und RStudio erfolgreich installiert. 1.3 Add-on packages R ist ein erweiterbares System und viele Menschen teilen nützlichen Code, den sie als Paket entwickelt haben, über CRAN und GitHub. Um ein Paket von CRAN zu installieren, z.B. das Paket tidyverse (ist genauer gesagt eine Kollektion von Paketen), kann man folgenden Befehl verwenden install.packages(&quot;tidyverse&quot;, dependencies = TRUE) Mit der Option dependencies = TRUE achten wir darauf, dass alle für tidyverse notwendigen Pakete, ebenfalls installiert werden. 1.4 RStudio Primers Ein guter Startpunkt für verschiedene R Themen sind die RStudio primers. Im Laufe des Kurses werden sie die Primers The Basics Work with Data Visualize Data durcharbeiten. 1.5 Aufgabe Wir beginnen mit The Basics. Hier wird unterschieden in Programming and Visualization Basics. Programming Basics beinhaltet Grundlagen zu Objekttypen, Funktionen und deren Argumente, Listen (eigentlich sind alle Objekte Listen, nur unterschiedlich speziell) und Paketen. Visualization Basics erklärt erste Schritte in der Verwendung des ggplot2 Pakets, mit dem wir uns später noch eingehend beschäftigen werden. Bearbeiten sie eigenständig den Basics Primer. "],
["r-basics.html", "Kapitel 2 R Basics und Arbeitsabläufe 2.1 Ein paar Grundlagen für das Arbeiten mit R 2.2 Workspace und working directory 2.3 RStudio Projects 2.4 Zuletzt noch", " Kapitel 2 R Basics und Arbeitsabläufe 2.1 Ein paar Grundlagen für das Arbeiten mit R Aktueller Stand: Du hast bereits den Programming Basics Primer absolviert und nun willst du anfangen mit deiner RStudio/R Installation zu arbeiten arbeiten. Es geht los indem du RStudio startest. Beachte dabei die Standardfensterbereiche: Console (links) Environment / History (oben rechts) Files / Plots / Packages / Help (unten rechtes) Bemerkung: Die Standardanordnung der Fenster kannst du neben vielen anderen Dingen nach deinen Vorstellungen ändern/anpassen: Customizing RStudio. Gehen nun in die Konsole um mit R zu interagieren. Erstelle die nachfolgende Zuordnung und schau dir das erstellte Objekt genauer an: x &lt;- 3 * 4 x #&gt; [1] 12 Alle R Befehle, die ein Objekte erstellen (“Zuweisungen”), haben die Form: objectName &lt;- value Du wirst im weiteren Verlauf noch viele Zuweisungen vornehmen, und es ist tatsächlich etwas mühsam den Operator &lt;- zu tippen. Sei aber trotzdem nicht faul und benutze = stattdessen - auch wenn es theoretisch funktionieren würde. Aber später kann die Verwendung von = für Zuweisungen zu Verwirrung führen. Verwende stattdessen in RStudio die Tastenkombination: Alt + - (Minuszeichen). Beachte, dass RStudio automatisch &lt;- mit Leerzeichen umgibt, was eine nützliche Codeformatierung demonstriert. Code ist selbst an einem guten Tag eher schlecht zu lesen. Gönne daher deinen Augen eine Pause und verwende (ausreichend) Leerzeichen. RStudio bietet viele praktische Tastaturkürzel an. Eine Übersicht erhält man auch mit Alt+Shift+K. Objektnamen dürfen nicht mit einer Ziffer beginnen und bestimmte andere Zeichen wie ein Komma oder ein Leerzeichen nicht enthalten. Es ist daher ratsam, sich eine Konvention zur Abgrenzung von Wörtern in Objektnamen zu überlegen. i_use_snake_case other.people.use.periods evenOthersUseCamelCase Wir werden stets die erste Variante verwenden. Führe nun nachfolgenden Befehl aus this_is_a_really_long_name &lt;- 2.5 In deinem Workspace ist nun das Objekt this_is_a_really_long_name vorhanden. Probiere mithilfe dieses Objekts die Vervollständigungsfunktion von RStudio aus: Gib die ersten paar Zeichen ein, drück anschließend die TAB Taste, fügen weitere Zeichen hinzu, bis Eindeutigkeit hergestellt ist(wenn sonst wenig in deinem Workspace ist, dann ist das schnell erreicht), und drücke dann die Eingabetaste. Führe nun den Befehl jenny_rocks &lt;- 2 ^ 3 aus, um anschließend den Inhalt des Objekts anzuzeigen. jennyrocks #&gt; Error in eval(expr, envir, enclos): object &#39;jennyrocks&#39; not found jeny_rocks #&gt; Error in eval(expr, envir, enclos): object &#39;jeny_rocks&#39; not found Die Objekte jennyrocks und jeny_rocks sind natürlich nicht vorhanden und somit führen beide Befehle zu einer Fehlermeldung. Man muss also absolut exakt sein mit seinen Befehlen. R verfügt über eine überwältigende Sammlung eingebauter Funktionen, die nach folgendem Schema aufgerufen werden: functionName(arg1 = val1, arg2 = val2, and so on) Als nächstes wollen wir die Funktion seq() verwenden, die reguläre Zahlensequenzen erzeugt. Dabei wollen wir noch ein weiteres hilfreiches Feature von RStudio demonstrieren. Tippe se und drücke dann die TAB Taste. In einem Pop-Up Fenster werden dir mögliche Vervollständigungen angezeigt. Der Befehl seq() kann dann durch weiteres Tippen oder über die Auswahlmöglichkeit (Pfeiltasten nach oben/unten) festgelegt werden. Zu jeder Auswahlmöglichkeit wird auch noch eine Kurzform der entsprechenden Hilfeseite angezeigt. Fügt man jetzt die öffnende runde Klammer hinzu, so wird die zugehörige schließende runde Klammer automatisch hinzugefügt. Tippe anschließend 1, 10 (das geschieht automatisch innerhalb der runden Klammern) und Return. RStudio beendet auch den Klammerausdruck für dich. IDEs sind großartig. seq(1, 10) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 Der letzte Befehl zeigt auch ganz gut, wie R Funktionsargumente auflöst. Sie können immer in der Form Name = Wert angeben werden. Aber der Name muss nicht angegeben werden, wie man sieht. In solchen Fällen versucht R, nach der Position aufzulösen. So wird oben angenommen, dass wir eine Sequenz bei 1 starten wollen, also from = 1, und diese bis 10 laufen soll, daher to = 10. Da wir keine Schrittweite angegeben haben, wird der Standardwert für by verwendet, der in diesem Fall gleich 1 ist. Bei Funktionen, die man oft aufruft, kann man gut diese Auflösung nach Position für das erste und vielleicht auch das zweite Argument verwenden. Danach ist es aber ratsam immer mit Name = Wert zu arbeiten um falsche Zuweisungen (verschiedene Argumente können vom gleichen Typ sein, sodass eine falsche Zuweisung nicht automatisch zu einer Fehlermeldung führt) zu vermeiden. Analog zur Unterstützung mit den runden Klammern, werden auch schließende Anführungszeichen automatisch ergänzt, wie man in folgendem Beispiel sieht. yo &lt;- &quot;hello world&quot; Nach einer Zuweisung wird der entsprechende Wert des Objekts nicht angezeigt. Daher ist man vielleicht dazu geneigt das Objekt gleich erneut aufzurufen y &lt;- seq(1, 10) y #&gt; [1] 1 2 3 4 5 6 7 8 9 10 Diese typische Aktion kann verkürzt werden, indem die Zuweisung in Klammern gesetzt wird, wodurch die Zuweisung und ein Befehl “Drucke auf den Bildschirm” erfolgen. (y &lt;- seq(1, 10)) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 Nicht alle Funktionen haben (oder erfordern) Argumente: date() #&gt; [1] &quot;Fri Oct 30 14:38:37 2020&quot; Schau dir nun deinen Workspace an - im oberen rechten Fensterbereich (bei Standardeinstellung) siehst du unter Environment den Inhalt deines Workspaces. Der Workspace ist der Ort, an dem sich benutzerdefinierte Objekte ansammeln. Eine Liste dieser Objekte kannst du auch mit diesen Befehlen erhalten: objects() #&gt; [1] &quot;check_quietly&quot; &quot;install_quietly&quot; #&gt; [3] &quot;jenny_rocks&quot; &quot;pretty_install&quot; #&gt; [5] &quot;shhh_check&quot; &quot;this_is_a_really_long_name&quot; #&gt; [7] &quot;x&quot; &quot;y&quot; #&gt; [9] &quot;yo&quot; ls() #&gt; [1] &quot;check_quietly&quot; &quot;install_quietly&quot; #&gt; [3] &quot;jenny_rocks&quot; &quot;pretty_install&quot; #&gt; [5] &quot;shhh_check&quot; &quot;this_is_a_really_long_name&quot; #&gt; [7] &quot;x&quot; &quot;y&quot; #&gt; [9] &quot;yo&quot; Wenn du nun das Objekt mit dem Namen y entfernen möchtest, kannst du dies wie folgt machen: rm(y) Alles löschen kannst du mit dem Befehl rm(list = ls()) oder du klickst auf den Besen im Environment Fenster von RStudio. 2.2 Workspace und working directory Ziemlich schnell wird der Fall eintreten, dass du mit deiner R Arbeit (z.B. Bearbeitung eines Hausaufgaben Projekts) noch nicht fertig bist obwohl es Zeit wird R zu beenden. Natürlich willst du aber zu einem spätern Zeitpunkt mit der Analyse weitermachen wo du aufgehört hast. Etwas später wird es so ein, dass du Daten in R einlesen und anschließend numerische Ergebnisse erzeugen willst, die du dann schließlich auch wieder exportieren willst. Un nochmal später wird es (vielleicht) so sein, dass du in R gleichzeitig an mehreren Analysen arbeitest, die du aber unbedingt getrennt halten willst/sollst. Um diese Situationen zu bewältigen, musst du zwei Entscheidungen treffen: Was betrachtest du an deiner Analyse als “Ergebnis”, d.h. was wirst du dauerhaft speichern? Wo “lebt” deine Analyse? 2.2.1 Workspace, .RData Du startest gerade deine R Reise. Daher wäre es Okay, wenn du deinen Workspace als die “Ergebnis” deiner Analyse betrachtest. Ziemlich bald, solltest du aber davon (vielleicht durch uns) überzeugt sein, dass deine R Skripte das Ergebnis deiner Analyse sind (in beiden Fällen hängt das Ergebnis möglicherweise natürlich auch von Input Daten ab). Die Daten zusammen mit deinem R Code erlauben es dir jederzeit alle Ergebnisse zu reproduzieren und das ist die entscheidende Eigenschaft. Betrachtest du deinen Workspace als das Ergebnis deiner Analyse, dann musst du bei einem erneuten Analysedurchlauf (leicht veränderte Aufgabenstellung, …) entweder erneut eine Menge Tippen (was natürlich fehleranfällig ist) oder deine R History nach den nötigen Befehlen durchwühlen. Anstatt “becoming an expert on managing the R history”, solltest du deinen R Code sauber in ein Skript speichern, sodass er dir für weitere Analysen zur Verfügung steht. Der Workspace Ansatz wird “begünstigt” durch die Tatsache, dass RStudio beim Beenden der Session automatisch frägt ob der Workspace gespeichert werden soll. Das wollen wir mal ausprobieren. Beende R/RStudio, entweder über das Menü oder du tippst q() in die Konsole. Dann erhälst du eine Eingabeaufforderung wie diese: Save workspace image to ~/.Rdata? Merke dir in welchem Verzeichnis die Datei gespeichert wird und dann klick auf Save. Gehe in das Verzeichnis mit dem gespeicherten Workspace Image und kontrolliere ob die Datei .RData vorhanden ist. Du wirst dort auch die Datei .Rhistory finden, die alle Befehle deiner letzten Sitzung enthält. Nun starte erneut RStudio. In der Konsole siehst du einen Befehl, der ungefähr so aussieht [Workspace loaded from ~/.RData] und angibt, dass dein gespeicherter Workspace wiederhergestellt wurde. Unter Environment solltest du die gleichen Objekte wie zuvor sehen. History enthält die gespeicherten Befehle aus der letzten Sitzung. Aber diese Art, analytische Arbeit zu beginnen und zu beenden, würde so nicht lange gut gehen. Daher fangen wir gleich mal damit an die automatische Nachfrage nach dem Speichern des Workspaces abzuwählen. Öffne dazu die Global Options (unter Tools) und setze Save workspace to .RData on exit auf Never. Nun wirst du nie mehr gefragt ob du deinen Workspace speichern willst. Sehr wohl wirst du aber weiterhin gefragt ob du ungesicherte Änderungen in deinem R Skript speichern willst, sobald do RStudio beenden willst. 2.2.2 Working directory Jeder Prozess, der auf deinem Computer läuft, hat einen Bezug zu seinem “Arbeitsverzeichnis”. In R ist dies der Ort, an dem R standardmäßig nach Dateien suchen würde oder der Ort wo alle Dateien, die du auf die Festplatte schreiben willst, abgelegt werden. Möglicherweise ist dein aktuelles Arbeitsverzeichnis das Verzeichnis, das du oben gerade untersucht hast um die .RData Datei zu finden. Du kannst dir dein aktuelles Arbeitsverzeichnis anzeigen lassen mit dem Befehl getwd() Aber es wird auch oben an der RStudio Konsole direkt angezeigt. Es wäre schon, wenn das Arbeitsverzeichnis in Abhängigkeit vom jeweils zu bearbeitenden Projekt leicht sinnvoll gesetzt werden könnte. Im nächsten Abschnitt sehen wir, dass genau das möglich ist. 2.3 RStudio Projects Alle zu einem Projekt gehörenden Dateien - Eingabedaten, R Skripte, Analyseergebnisse, Grafiken - an einem Ort zu bündeln, ist eine so weise und gängige Praxis, dass RStudio über seine Projects genau da ermöglicht. Lass uns ein Projekt für den Kurs anlegen. Dazu wählen wir oben rechts im RStudio Fenster Project: (None) -&gt; New Project Danach wählen wir New Directory -&gt; New Project und geben abschließend einen passenden Verzeichnisnamen ein (dabei beachten wir den Speicherort des neuen Verzeichnisses) Wir nehmen nun an, dass du ein RStudio Projekt angelegt und dieses auch geöffnet hast. Dann benötigen wir ein weing R Code. Dazu tippen wir den untenstehenden Code (ausnahmsweise) in die Konsole a &lt;- 2 b &lt;- -3 sig_sq &lt;- 0.5 x &lt;- runif(40) y &lt;- a + b * x + rnorm(40, sd = sqrt(sig_sq)) (x_n &lt;- mean(x)) #&gt; [1] 0.469 write(x_n, &quot;mittelwert_x.txt&quot;) plot(x, y) abline(a, b, col = &quot;purple&quot;) dev.print(pdf, &quot;scatterplot.pdf&quot;) #&gt; quartz_off_screen #&gt; 2 Jetzt nehmen wir mal an das wäre ein guter Start einer Analyse, die wir durchführen wollen. Daher würdest du das Ergebnis gerne abspeichern. Unter History kannst du alle obigen Befehle markieren und anschließend “To Source” klicken. Daraufhin wird sich ein neues Fenster mit einem R Skript - das natürlich die Befehle enthält - öffnen. Das Skript kannst du abspeichern und standardmäßig wird es in deinen Projektordner gespeichert werden (aber natürlich könntest man den Speicherort an dieser Stelle auch ändern/frei wählen). Nun beende das Projekt (Close Project in der rechten oberen Ecke). Wenn du willst, kannst du dir auch den Inhalt deines Projektordners anschauen, z.B. das PDF öffnen. Danach öffnest du das Projekt wieder. Dir wird auffallen, dass alles in dem Zustand ist, wie du das Projekt verlassen hast, z.B. Objekte im Arbeitsbereich, die Befehlshistorie, welche Dateien zur Bearbeitung geöffnet sind, wo wir uns im Dateisystembrowser befinden, das Arbeitsverzeichnis für den R-Prozess usw. All dies sind gute Dinge. Nun ändern ein paar Dinge an deinem Code. Sinnvoll wäre z.B. am Anfang die Stichprobenlänge n zu definieren und z.B. auf n &lt;- 40 setzen. Dann sollten alle festen 40er Werte durch n ersetzt werden. Anschließend kannst du noch ein paar andere Dinge ändern, z.B. die Steigung b, die Farbe der Linie … was auch immer. Übe nun die verschiedenen Möglichkeiten, den Code erneut auszuführen: Führe Zeile für Zeile aus indem du entweder das Tastaturkürzel Command + Enter oder die Maus (auf “Run” klicken in der oberen rechten Ecke des Editor-Fensters) verwendest. Das gesamte Dokument durchlaufen lassen per Tastaturkürzel Shift + Command +S oder Maus (klicken auf “Source” in der oberen rechten Ecke des Editor-Fensters) Anschließend kannst du dir das PDF anschauen und die Änderungen bewundern. Eines Tages wirst du vor der Aufgabe stehen eine Grafik neu zu gestalten oder einfach nur verstehen wollen, woher sie stammt. Wenn du (relevante) Grafiken in einer Datei (mit R Code und niemals über die Maus oder die Zwischenablage) speicherst und dabei sinnvolle Dateinamen/Speicherorte (innerhalb des zugehörigen Projekts) benutzt, werden dich solche Aufgaben nie vor große Probleme stellen. 2.4 Zuletzt noch Es ist üblich, R-Skripte mit einem .R oder .r Suffix zu speichern. Befolge diese Konvention, außer du hast einen sehr außergewöhnlichen Grund, es nicht zu tun. Kommentare beginnen mit einem oder mehreren #-Symbolen. Verwende Kommentare.. RStudio hilft dir dabei ausgewählte Zeilen mit Ctrl+Shift+C (Windows und Linux) oder Command+Shif+C (Mac) zu kommentieren oder vorhandene Kommentare wieder zu entfernen. Dieser Workflow wird dir in Zukunft gute Dienste leisten: Erstelle eines RStudio Projekt für ein analytisches Projekt Speichere alle Input Dateien innerhalb des Projekts (wir werden bald über den Import sprechen) Bewahre deine Skripte dort auf; bearbeite sie und führen sie dort aus Speichere den Ouptput innerhalb des Projekts (wie z.B. das PDF im letzten Beispiel) Du solltest es vermeiden die Maus für Teile deines Workflows zu verwenden, wie z.B. das Laden eines Datensatzes oder das Speichern einer Grafik. Das ist sehr wichtig für die Reproduzierbarkeit und um im Nachhinein feststellen zu können, wie eine numerische Tabelle oder eine PDF-Datei tatsächlich erzeugt wurde (eine Suche auf der lokalen Festplatte nach dem entsprechenden Dateinamen unter den .R-Dateien führt zum entsprechenden Skript). "],
["version-control.html", "Kapitel 3 Git, GitHub, and RStudio", " Kapitel 3 Git, GitHub, and RStudio Wir wissen nicht ob Versionskontrolle bereits ein Thema war mit dem du dich beschäftigt hast. Wenn nicht, solltest du mit ein paar Worten zu Git und GitHub von Jenny Byran (Autorin von STAT 545) starten. Ziel dieses Abschnitts wird es sein, dass du einen GitHub Account anlegst (falls nicht schon vorhanden) Git auf deinem Computer installierst dich bei Git vorstellst alles zusammenfügst und deine Verbindung zu GitHub testest abschließend noch RStudio ins Spiel bringst und RStudio mit Git und GitHub verbindest Bemerkung: Unter 5. wirst du ermutigt deine GitHub Zugangsdaten auf deinem Computer zu speichern. Wir können diesen Schritt nur empfehlen. Das Buch Happy Git and GitHub for the useR enthält noch viele weitere hilfreiche Git/GitHub Informationen. Auf manche kommen wir vielleicht im Laufe des Kurses noch zu sprechen. Andere sind vielelicht zu einem späteren Zeitpunkt interessant, wenn du an anspruchsvolleren Git Projekten arbeitest. "],
["r-markdown.html", "Kapitel 4 R Markdown", " Kapitel 4 R Markdown Ausgewählte Hausaufgaben wirst du als R Markdown Dokument abgeben. R Markdown ist eine sehr zugängliche Methode zur Erstellung von Dokumenten, die Prosa Text mit durch R-Code erzeugten Tabellen und Abbildungen kombinieren. Ein möglicher R Markdown Workflow, der eine Interaktion mit Git, GitHub, und RStudio beinhaltet, wird vorgestellt auf der Seite: Test drive R Markdown "],
["references.html", "References", " References "]
]
